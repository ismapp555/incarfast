
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users can only read and write their own data.
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Vehicle types are public and can be read by any authenticated user.
    match /vehicletypes/{vehicleTypeId} {
      allow read: if request.auth != null;
      // Write access should be restricted (e.g., to admins), but is left open for this example.
      allow write: if request.auth != null; 
    }

    // Rules for rides
    match /rides/{rideId} {
      // CREATE: A passenger can create a ride request.
      allow create: if request.auth != null && request.resource.data.passengerId == request.auth.uid;
      
      // READ: 
      // - A passenger can read a ride if their ID is on it.
      // - A driver can read a ride if their ID is on it.
      allow read: if request.auth != null && 
                  (resource.data.passengerId == request.auth.uid || resource.data.driverId == request.auth.uid);

      // UPDATE:
      // - A passenger can update a ride (e.g., to cancel it) if they are the passenger and the ride is pending.
      // - A driver can update a ride (e.g., to accept it) if their ID is not yet assigned.
      allow update: if request.auth != null &&
                    ( (resource.data.passengerId == request.auth.uid && resource.data.status == 'pending') ||
                      (resource.data.driverId == null && request.resource.data.driverId == request.auth.uid) );
    }

    // Drivers can update their own location.
    // Any authenticated user can read driver locations.
    match /drivers_locations/{driverId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == driverId;
    }
  }
}
